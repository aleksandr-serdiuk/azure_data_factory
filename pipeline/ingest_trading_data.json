{
	"name": "ingest_trading_data",
	"properties": {
		"activities": [
			{
				"name": "Script",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "synapse",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "/*\nSELECT\n\tCAST(CAST(DATEADD(DAY, c*100+b*10+a, '2023-01-01') AS DATE) AS VARCHAR) dt\nFROM \n\t(SELECT 0 a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a\n\tCROSS JOIN \n\t(SELECT 0 b UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b\n\tCROSS JOIN \n\t(SELECT 0 c UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) c\nWHERE\n\tCAST(DATEADD(DAY, c*100+b*10+a, '2023-01-01') AS DATE) < CAST(GETDATE() AS DATE)\n*/\n\nSELECT\n\tCAST(CAST(DATEADD(DAY, c*100+b*10+a, DATEADD(DAY, -7, GETDATE())) AS DATE) AS VARCHAR) dt\nFROM \n\t(SELECT 0 a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a\n\tCROSS JOIN \n\t(SELECT 0 b UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b\n\tCROSS JOIN \n\t(SELECT 0 c UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) c\nWHERE\n\tCAST(DATEADD(DAY, c*100+b*10+a, DATEADD(DAY, -7, GETDATE())) AS DATE) < CAST(GETDATE() AS DATE)\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "ForEach",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Script",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('script').output.resultSets[0].rows",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Get Folder Details",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "ds_trading_raw",
									"type": "DatasetReference",
									"parameters": {
										"p_folder": {
											"value": "@concat('trade','/',item()['dt'])",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							}
						},
						{
							"name": "If Folder Exists",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get Folder Details",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@activity('Get Folder Details').output.exists",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Ingest Trading",
										"type": "DatabricksNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": "/trading/ingestion/trade/ingest_trading",
											"baseParameters": {
												"p_file_date": {
													"value": "@item()['dt']",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "serdiuk_databricks",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"concurrency": 1,
		"folder": {
			"name": "trading_databricks"
		},
		"annotations": [],
		"lastPublishTime": "2023-05-05T09:40:42Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}